- name: Initialize the deployment
  deploy_helper:
    path: "{{ application_root_directory }}"

- name: Connect to gcloud console
  shell: gcloud auth activate-service-account --key-file=/root/gc-storage.json
  check_mode: false

- name: Check list of latest archived artifact
  shell: gsutil ls -l gs://crazyinventor-build-artifacts/{{ application_name }} | sort -k 2 -r | awk '{print $NF}'
  register: gsutil_list
  check_mode: false
  
- name: Download archived artifact
  shell: "gsutil cp {{ gsutil_list.stdout_lines[1] }} {{ application_root_directory }}/tmp/latest.tar.gz"

- name: Extract archived artifact
  unarchive:
    src: "{{ application_root_directory }}/tmp/latest.tar.gz"
    dest: "{{ application_root_directory }}/tmp"
    remote_src: yes
  when: not ansible_check_mode

- name: Copy artifact to new_release_path
  command: "mv {{ application_root_directory }}/tmp/dist {{ deploy_helper.new_release_path }}"
  when: not ansible_check_mode

- name: Remove archived artifact
  file:
    path: "{{ application_root_directory }}/latest.tar.gz"
    state: absent
  when: not ansible_check_mode

- set_fact:
    env_file_path: "{{ deploy_helper.shared_path }}/.env"
    db_file_path: "{{ deploy_helper.shared_path }}/database.sqlite"

- name: check environment file
  stat:
    path: "{{ env_file_path }}"
  register: env_file

- name: initialize environment file
  file:
    path: "{{ env_file_path }}"
    state: touch
  when: env_file.stat.exists == false
  register: env_file_init

- name: Link environment file
  tags: environment
  file:
    src: "{{ env_file_path }}"
    dest: "{{ deploy_helper.new_release_path }}/.env"
    owner: www-data
    group: www-data
    state: link

- name: write variables to environment file
  tags: environment
  lineinfile:
    path: "{{ env_file_path }}"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    state: present
  loop:
    - { regexp: '^APP_NAME', line: 'APP_NAME=Centerverse' }
    - { regexp: '^APP_ENV', line: 'APP_ENV=local' }
    - { regexp: '^APP_DEBUG', line: 'APP_DEBUG=true' }
    - { regexp: '^APP_URL', line: 'APP_URL=https://api.bigbro.lab.crazyinventor.net' }
    - { regexp: '^DB_CONNECTION', line: 'DB_CONNECTION=sqlite' }
    - { regexp: '^QUEUE_CONNECTION', line: 'QUEUE_CONNECTION=database' }
    - { regexp: '^APP_CORS_ORIGIN', line: 'APP_CORS_ORIGIN=https://stage.bigbro.lab.crazyinventor.net' }

- name: check if application encryption key is set
  tags: environment
  command: "grep -q APP_KEY {{ env_file_path }}"
  register: app_key_state
  changed_when: no
  failed_when: app_key_state.stderr != ""

- name: write application encryption key to environment file
  tags: environment
  become: yes
  become_user: "www-data"
  block:
  - name: add empty key
    lineinfile:
      path: "{{ env_file_path }}"
      regexp: "^APP_KEY="
      line: "APP_KEY="
      state: present
  - name: use artisan to generate key
    shell: php artisan key:generate
    args:
      chdir: "{{ deploy_helper.new_release_path }}"
  when:
  - app_key_state.rc is defined
  - app_key_state.rc == 1

- name: ensure db file exists
  stat:
    path: "{{ db_file_path }}"
  register: database_file

- name: initialize database
  file:
    path: "{{ db_file_path }}"
    group: "www-data"
    owner: "www-data"
    mode: 0644
    state: touch
  when: database_file.stat.exists == false

- name: Link database file
  file:
    src: "{{ db_file_path }}"
    dest: "{{ deploy_helper.new_release_path }}/database/database.sqlite"
    owner: www-data
    group: www-data
    state: link

- name: run migrations
  become: yes
  become_user: "www-data"
  shell: php artisan migrate --force
  args:
    chdir: "{{ deploy_helper.new_release_path }}"
  register: migration
  changed_when: migration.stdout != "Nothing to migrate."

- name: "schedule cronjob"
  include_role:
    name: cron
  vars:
    cron_task_id: "bigbro_api_cron"
    cron_task_month: "*"
    cron_task_day: "*"
    cron_task_weekday: "*"
    cron_task_minute: "*"
    cron_task_hour: "*"
    cron_task_user: "www-data"
    cron_task_job: "cd {{ deploy_helper.new_release_path }} && php artisan schedule:run >> /dev/null 2>&1"
    cron_task_state: absent

- name: Finalize the deployment
  deploy_helper:
    path: "{{ application_root_directory }}"
    release: '{{ deploy_helper.new_release }}'
    state: finalize
    keep_releases: 10
